from django.db import modelsfrom django.db.models import Qclass ContainerRequestManager(models.Manager):    def get_object(self, pk):        return super(ContainerRequestManager, self).select_related().get(Q(pk=pk) & ~Q(status="D"))    def get_object_by_user(self, name):        try:           Container = super(ContainerRequestManager, self).select_related().get(Q(owner=name) & ~Q(status="D"))        except ContainerRequest.DoesNotExist:           Container = None        return Container     def get_object_by_server(self, server):        try:           Container = super(ContainerRequestManager, self).select_related().get(Q(server=server) & ~Q(status="D"))        except ContainerRequest.DoesNotExist:           Container = None        return Container    def get_most_available_host(self):        try:           host = ContainerHost.objects.annotate(sum_containers=Sum('ContainerRequest__weight')).order_by().first()        except ContainerRequest.DoesNotExist:           host = None        return Containerclass ContainerHostManager(models.Manager):    def get_object(self, pk):        return super(ContainerHostManager, self).select_related().get(Q(pk=pk) & ~Q(status="D"))class ContainerHost(models.Model):    id = models.AutoField(primary_key=True)    name = models.CharField(max_length=100, null=False)    location = models.CharField(max_length=300, null=True)    region = models.CharField(max_length=100, null=True)    created = models.DateTimeField(null=True, editable=False)    modified = models.DateTimeField(null=True, auto_now_add=True)    status = models.CharField(max_length=2, null=False, default='A', editable=False)    objects = ContainerHostManager()    class Meta:        managed = True        app_label = 'api'        db_table = 'Container_hosts'class ContainerRequest(models.Model):    id = models.AutoField(primary_key=True)    connector_id = models.ForeignKey(ContainerHost, editable=False)    name = models.CharField(max_length=100, null=False)    location = models.CharField(max_length=300, null=True)    region = models.CharField(max_length=100, null=True)    platform = models.CharField(max_length=100, null=True)    server = models.CharField(max_length=100, null=True)    Container_size = models.IntegerField(null=True, blank=False, default='0', editable=False)    weight = models.IntegerField(null=True, blank=False, default='1', editable=False)    owner = models.CharField(max_length=50, null=True)#, editable=False)    created = models.DateTimeField(null=True, editable=False)    modified = models.DateTimeField(null=True, auto_now_add=True)    status = models.CharField(max_length=2, null=False, default='A', editable=False)    objects = ContainerRequestManager()    class Meta:        managed = True        app_label = 'api'        db_table = 'Container_registrations''''CREATE TABLE `Container_registrations` (  `id` int(11) NOT NULL AUTO_INCREMENT,  `name` varchar(50) NOT NULL,  `location` varchar(50) NULL,  `region` varchar(50) NOT NULL,  `platform` varchar(50) NOT NULL,  `server` varchar(100) NOT NULL,  `Container_size`   int(11) NOT NULL,  `owner` varchar(50) NULL,  `status` char(2) NOT NULL,  `created` datetime DEFAULT NULL,  `modified` datetime DEFAULT NULL,  PRIMARY KEY (`id`)) ENGINE=InnoDB AUTO_INCREMENT=15 DEFAULT CHARSET=utf8;'''
