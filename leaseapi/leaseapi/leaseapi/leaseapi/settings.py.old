"""
Django settings for leaseapi project.

Generated by 'django-admin startproject' using Django 1.8.2.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

try:
    from ConfigParser import RawConfigParser
except:
    from configparser import RawConfigParser

parser = RawConfigParser()
parser.read(BASE_DIR + '/config.ini')


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '19--ge%i6m@ax#=d1-!e*dmm=&=t@!qs%u!))_+k22(lgdy4zw' 

#AUTHENTICATION_BACKENDS = ('cloudapi_utils.backend.AdobeBackend',)

SERVICE_NAME="Lease"

# SECURITY WARNING: don't run with debug turned on in production!
ENVIRONMENT = "DEV"
ENVIORNMENT = "DEV"
if ENVIRONMENT == "DEV":
    DEBUG = TEMPLATE_DEBUG = True
else:
    DEBUG = TEMPLATE_DEBUG = False

TEMPLATE_DIRS = (
      BASE_DIR + '/api/templates',
)

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'api',
    'rest_framework_swagger',
    'rest_framework',
    'cloudapi_utils',
)

MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    #'cloudapi_utils.middleware.AdobeOauth2Middleware',
)

ROOT_URLCONF = 'leaseapi.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'leaseapi.wsgi.application'

JENKINS_TASKS = ( 
    'django_jenkins.tasks.run_pep8', 
    'django_jenkins.tasks.run_pylint', 
)

#email settings
RESOURCE_MAP_EMAIL = parser.get('mail','map_mail')
ITC_DEV_MAIL = parser.get('mail','dev_mail')
ADMIN_EMAIL = parser.get('mail','admin_mail')
EMAIL_SUBJECT = parser.get('mail','global_subject')
EMAIL_HOST = 'europemail.eur.adobe.com'

# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases
#if 'jenkins' in os.sys.argv or 'test' in os.sys.argv:
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
    }
"""
else:
    DATABASES = {
#    'default': {
#        'ENGINE':'django.db.backends.mysql',
#        'NAME':'scalr',
#        'USER':'scalr',
#        'PASSWORD':'scalr',
#        'HOST':'10.5.250.34',
#        'PORT':'3306',
#        'BYPASS_CREATION':'yes'
#    },
#mysql --host=10.5.250.41 --port=3306 --user=scalr --password=sca@lrpass scalr
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'HOST': '10.5.250.34',
        'PORT': '3306',
        'NAME': 'scalr',
        'USER': 'scalr',
        'PASSWORD': 'sc@lrpass',
    }
   }
"""

REST_FRAMEWORK = {
    'PAGINATE_BY': 10,
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ),
    'DEFAULT_PARSER_CLASSES': (
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser',
    ),
}

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            },
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': 'leaseapi.log',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'django.request': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'api': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'leaseapi': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'api.v1.views': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}

#DATABASES = {
#    'default': {
#        'ENGINE': 'django.db.backends.sqlite3',
#        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
#    }
#}
#LOGGING = {
#    'version': 1,
#    'disable_existing_loggers': False,
#    'handlers': {
#        'file': {
#            'level': 'DEBUG',
#            'class': 'logging.FileHandler',
#            'filename': '/mylog/NFSExport.error.log',
#        },
#    },
#    'loggers': {
#        'django.request': {
#            'handlers': ['file'],
#            'level': 'DEBUG',
#            'propagate': True,
#        },
#    },
#}


# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/


STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATIC_URL = '/static/'
STATICFILES_STORAGE = 'whitenoise.django.GzipManifestStaticFilesStorage'
ALLOWED_STATIC_PATH = ['documentation', 'documentationapi-docs', 'static']

print("static root:" + STATIC_ROOT)

SWAGGER_SETTINGS = {
    'exclude_namespaces': [],
    'api_version': '0.2',
    'api_path': '/',
    'enabled_methods': [
        'get',
        'post',
        'patch',
        'delete'
    ],
    'api_key': '',
    'is_authenticated': False,
    'is_superuser': False,
    'permission_denied_handler': None,
    'doc_expansion': 'none',
}

