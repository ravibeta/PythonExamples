"""
Django settings for commvaultapi project.

Generated by 'django-admin startproject' using Django 1.8.2.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

try:
    from ConfigParser import RawConfigParser
except:
    from configparser import RawConfigParser

parser = RawConfigParser()
parser.read(BASE_DIR + '/config.ini')




# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '=l9&pap_k2$+!%_w9md!gwu5w8y6^pp#6n%r!th4cwej&fiaxq'

# SECURITY WARNING: don't run with debug turned on in production!
ENVIRONMENT = "DEV"
ENVIORNMENT = "DEV"
if ENVIRONMENT == "DEV":
    DEBUG = TEMPLATE_DEBUG = True
else:
    DEBUG = TEMPLATE_DEBUG = True

TEMPLATE_DIRS = (
      BASE_DIR + '/api/templates',
)

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'api',
    'rest_framework_swagger',
    'rest_framework',
)

MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    #'django.middleware.security.SecurityMiddleware',
)

ROOT_URLCONF = 'commvaultapi.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'commvaultapi.wsgi.application'

#ebackup settings
MQSERVER = parser.get('mq', 'mq_server')
print ('MQSERVER='+MQSERVER)
SPLUNK_MAP_EMAIL = parser.get('backup','map_backup')
print ('SPLUNK_MAP_EMAIL='+SPLUNK_MAP_EMAIL)
ITC_DEV_MAIL = parser.get('backup','dev_backup')
print ('ITC_DEV_MAIL='+ITC_DEV_MAIL)
ADMIN_EMAIL = parser.get('backup','admin_backup')
print ('ADMIN_EMAIL='+ADMIN_EMAIL)
EMAIL_SUBJECT = parser.get('backup','global_subject')
print ('EMAIL_SUBJECT=' + EMAIL_SUBJECT)
EMAIL_HOST = 'foo.xyz.com'
print ('EMAIL_HOST='+EMAIL_HOST)
VCOSERVERURL = parser.get('vco', 'server_url')
print ('VCOSERVER=' + VCOSERVERURL)
VCOAUTH = parser.get('vco', 'http_auth')
print ('VCOAUTH=' + VCOAUTH)
VCOUSER = parser.get('vco', 'vco_user')
print ('VCOUSER=' + VCOUSER)
VCOPWD = parser.get('vco', 'vco_pwd')
print ('VCOPWD=' + VCOPWD)


#if 'test' in os.sys.argv:
#    DATABASES['default']['ENGINE'] = 'django.db.backends.sqlite3'
#
if 'jenkins' in os.sys.argv or 'test' in os.sys.argv:
#    DATABASES = {
#     'default': {
#        'ENGINE': 'django.db.backends.sqlite3',
#        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
#     }
#    }
   DATABASES = {
        'default': {
             'ENGINE': 'django.db.backends.mysql',
             'HOST': parser.get('database','db_test_host'),   # Or an IP Address that your DB is hosted on
             'PORT': parser.get('database','db_test_port'),
             'NAME': parser.get('database','db_test_name'),
             'USER': parser.get('database','db_test_user'),
             'PASSWORD': parser.get('database','db_test_password'),
         }
    }
else:
    DATABASES = {
        'default': {
             'ENGINE': 'django.db.backends.mysql',
             'HOST': parser.get('database','db_host'),   # Or an IP Address that your DB is hosted on
             'PORT': parser.get('database','db_port'),
             'NAME': parser.get('database','db_name'),
             'USER': parser.get('database','db_user'),
             'PASSWORD': parser.get('database','db_password'),
         }
    }




REST_FRAMEWORK = {
    'PAGINATE_BY': 10,
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ),
    'DEFAULT_PARSER_CLASSES': (
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser',
    ),
}

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': 'commvaultapi.log',
        },
    },
    'loggers': {
        'django.request': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}

#DATABASES = {
#    'default': {
#        'ENGINE': 'django.db.backends.sqlite3',
#        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
#    }
#}
#LOGGING = {
#    'version': 1,
#    'disable_existing_loggers': False,
#    'handlers': {
#        'file': {
#            'level': 'DEBUG',
#            'class': 'logging.FileHandler',
#            'filename': '/mylog/NFSExport.error.log',
#        },
#    },
#    'loggers': {
#        'django.request': {
#            'handlers': ['file'],
#            'level': 'DEBUG',
#            'propagate': True,
#        },
#    },
#}


# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/


#STATIC_ROOT = ''
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATIC_URL = '/static/'
STATICFILES_DIRS = ( os.path.join('static'), )
#STATICFILES_STORAGE = 'whitenoise.django.GzipManifestStaticFilesStorage'
#ALLOWED_STATIC_PATH = ['documentation', 'documentationapi-docs', 'static']

print("static root:" + STATIC_ROOT)

SWAGGER_SETTINGS = {
    'exclude_namespaces': [],
    'api_version': '0.2',
    'api_path': '/',
    'enabled_methods': [
        'get',
        'post',
        'patch',
        'delete'
    ],
    'api_key': '',
    'is_authenticated': False,
    'is_superuser': False,
    'permission_denied_handler': None,
    'doc_expansion': 'none',
}
